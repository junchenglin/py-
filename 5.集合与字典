1.元素类型
1.集合
1.1定义
  v1 = {22,33,"alex"}
  #无序的，无法通过索引取值
  #可变，可以添加和删除元素
  v1.add(55)
  print(v1) #(22,33,"alex",55)
  #不允许数据重复
  v1.add(22) #结果仍为原集合
  
  #定义空集合时需要用set()
  
  v1 = []
  v11 = list()
  
  v2 = ()
  v22 = tuple()
  
  v3 = set()
  
  v4 = {} #字典
  v44 =dict
  
1.2独有功能
1.2.1 增加
  data = set()
  data.add("alex")
  
 1.2.2删除
  data = {22,33,"alex"}
  data.discard("alex")
 
 1.2.3交集
  s1 = {"刘能","赵四","皮皮"}
  s2 = {"刘能","aaa","ads"}
  s4 = s1.intersection(s2)
  s3 = s1 & s2
  print(s3,s4)
  
 1.2.4并集
   s1 = {"刘能","赵四","皮皮"}
   s2 = {"刘能","aaa","ads"}
   s3 = s1| s2
   s4 =s1.union(s2)
   
  1.2.5差集
   s1 = {"刘能","赵四","皮皮"}
   s2 = {"刘能","aaa","ads"}
   s3 = s1 - s2 #s1中有 s2
   s4 = s1.difference(s2)
 
1.3公共功能
 1.3.1 减，即差集
 
 1.3.2交集，&
 
 1.3.3并集，|
 
 1.3.4长度
 v = {"aa","ff"}
 data = len(v)
 
 1.3.5for循环
 v = {"aa","ff"}
 for item in v
 
1.4转换
  int/list/tuple/dict 都可以转换为集合
  v1 = "武沛齐"
  v2 = set(v1)
  print(v2) # {"武","沛","齐"}
  
  v1 = [11,22,33,11,3,99,22]
  v2 = set(v1)
  print(v2) # {11,22,33,3,99}
  
  v1 = (11,22,3,11)
  v2 = set(v1)
  print(v2) # {11,22,3}
  提示：这其实也是去重的一个手段。

  data = {11,22,33,3,99}
  v1 = list(data) # [11,22,33,3,99]
  v2 = tuple(data) # (11,22,33,3,99)
  
1.5其他
  集合元素是将元素转换为哈希值，所以集合的元素必须为可哈希的值
  目前可哈希的数据类型：int、bool、str、tuple，而list、set是不可哈希的。
  总结：集合的元素只能是 int、bool、str、tuple 。（集合和列表不可哈希）
  
  转换成功
  v1 = [11,22,33,11,3,99,22]
  v2 = set(v1)
  print(v2) # {11,22,33,3,99}
  
  转换失败
  v1 = [11,22,["alex","eric"],33]
  v2 = set(v1) # 报错 
  print(v2) 

1.5.1查找速度快（存储原理）
  data = {11,22,33,3,99}
  if 11 in data :
    pass
 
1.5.2对比和嵌套
 {11,22(True,[11,22]),"ss"} #不正确 {}内所有值都应可哈希，列表不可哈希
  v1 = {True, 1}
  print(v1)  # {True} 都为1 取第一个

  v2 = {1, True}
  print(v2)  # {1}

  v3 = {0, False}
  print(v3)  # {0}

  v4 = {False, 0}
  print(v4)  # {False}
  
  #你个列表去重。
  v = [11,22,11,22,44455]
  data = set(v) # {11,22,44455}
  result = list(data) # [11,22,44455]
 
2.None类型
  v1 = None
  v2 = None
  
  v1 = [11,22,33,44]
  v2 = [111,22,43]
  v3 = []
  v4 = []
  
  v3 = [11,22,33,44]
  v4 = [111,22,43]
  注意：暂不要考虑Python内部的缓存和驻留机制。
  
  #目前所有转换为布尔值为False的值有：
  0
  ""
  [] or list()
  () or tuple()
  set()
  None

3.字典
  字典是 无序、键不重复 且 元素只能是键值对的可变的个容器。
  data = { "k1":1,  "k2":2 }
  
  容器、元素必须键值对、键不重复，重复则会被覆盖
  data = { "k1":1, "k1":2 }
  print(data) # {"k1":2}
  无序（在Python3.6+字典就是有序了，之前的字典都是无序。）

  data = { "k1":1,  "k2":2 }
  print(data)
 
3.1定义
  v1 = {}
  v2 = dict()
  data = { 
      "k1":1, 
      "k2":2 
  }
  info = { 
      "age":12, 
      "status":True,  
      "name":"wupeiqi",   
      "hobby":['篮球','足球']  
  }
  字典中对键值得要求：
  键：必须可哈希。 目前为止学到的可哈希的类型：int/bool/str/tuple；不可哈希的类型：list/set/dict。（集合）
  值：任意类型。
  data_dict = {
    "武沛齐":29,
     True:5,
    123:5,
      (11,22,33):["alex","eric"]
  }
  
  # 不合法
  v1 = {
      [1, 2, 3]: '周杰伦',
      "age" : 18
  } 
  v2 = {
      {1,2,3}: "哈哈哈",
      'name':"alex"
  } 

  v3 = {
      {"k1":123,"k2":456}: '呵呵呵',
      "age":999
  }
  data_dict = {
      1: 29,
      True: 5
  }
  print(data_dict) # {1: 5}
 

  当我们想要表示一组固定信息时，用字典可以更加的直观，例如：
  # 用户列表
  user_list = [ ("alex","123"), ("admin","666") ]
  ...
  # 用户列表
  user_list = [ {"name":"alex","pwd":"123"}, {"name":"eric","pwd":"123"} ]
  
 3.2独有功能
 1.获取值
  info = {
      "age": 12,
      "status" : True
      "name" : "alex"
   }
   
   data1 = info.get("name")
   data2 = info.get("age")
   
   data = info.get("email") #键不存在，默认返回None
   if data = None :
    print("键不存在")
   else :
    print(data)
    
    ***
    data = info.get("hobby",123) #键不存在
    print(data) #输出123
    
    user_list = {
      "alex" : 123
      "ssss" : 456
    } 
    user = input("用户名")
    pwd  = input("密码") 
    if user in user_list :
      password = user_list.get("user")
      if pwd == password:
        print("登录成功")
      else :
        print("登录失败")
    else ： 
      print("用户不存在")
     
2.所有的键     
  info = {"age":12, "status":True, "name":"wupeiqi","email":"xx@live.com"}
  data = info.keys()
  print(data) # 输出：dict_keys(['age', 'status', 'name', 'email'])    py2 -> ['age', 'status', 'name', 'email']

  result = list(data)
  print(result) # ['age', 'status', 'name', 'email']
  注意：在Python2中 字典.keys()直接获取到的是列表，而Python3中返回的是高仿列表，这个高仿的列表可以被循环显示。

  # 循环
  info = {"age":12, "status":True, "name":"wupeiqi","email":"xx@live.com"}
  for ele in info.keys():
      print(ele)
      
  # 是否存在
  info = {"age":12, "status":True, "name":"wupeiqi","email":"xx@live.com"}
  # info.keys() # dict_keys(['age', 'status', 'name', 'email'])
  if "age" in info.keys():
      print("age是字典的键")
  else:
      print("age不是")
  
  3.所有的键
    info = {"age":12, "status":True, "name":"wupeiqi","email":"xx@live.com"}
    data = info.values()

    print(data) # 输出：dict_values([12, True, 'wupeiqi', 'xx@live.com'])
    注意：在Python2中 字典.values()直接获取到的是列表，而Python3中返回的是高仿列表，这个高仿的列表可以被循环显示。

    # 循环
    info = {"age":12, "status":True, "name":"wupeiqi","email":"xx@live.com"}
    for val in info.values():
        print(val) 
        
    # 是否存在
    info = {"age":12, "status":True, "name":"wupeiqi","email":"xx@live.com"}
    if 12 in info.values():
        print("12是字典的值")
    else:
    print("12不是")
  
  4.所有的键值
    info = {"age":12, "status":True, "name":"wupeiqi","email":"xx@live.com"}
    data = info.items()
    print(data) # 输出 dict_items([ ('age', 12),  ('status', True),  ('name', 'wupeiqi'),  ('email', 'xx@live.com')  ])
    
    for item in info.items():
        print(item[0],item[1]) # item是一个元组 (键，值)
        
    for key,value in info.items():
        print(key,value) # key代表键，value代表值，将兼职从元组中直接拆分出来了。
        
    info = {"age":12, "status":True, "name":"wupeiqi","email":"xx@live.com"}
    data = info.items()
    if ('age', 12) in data:
        print("在")
    else:
        print("不在")
   
5.设置值，有值不改变
  data = {
    "name": "alex",
    "phone" :123
  }
  data.setdefault("age",18)
  print(data) #原本没有键值则增加 输出结果为：{    "name": "alex","phone" :123,"age":18}
  
  data.setdefault("name", "alex") #不变
  print(data)  # {'name': '武沛齐', 'email': 'xxx@live.com', 'age': 18}

6.更新字典键值对
  info = {"age":12, "status":True}
  info.update( {"age":14,"name":"武沛齐"} )   # info中没有的键直接添加；有的键则更新值
  print(info) # 输出：{"age":14, "status":True,"name":"武沛齐"}

7.移除指定键值对
  info = {"age":12, "status":True,"name":"武沛齐"}

  data = info.pop("age") #删除后赋值
  print(info) # {"status":True,"name":"武沛齐"}
  print(data) # 12
  
 8.按照顺序移除（后进先出）
  info = {"age":12, "status":True,"name":"武沛齐"}
  data = info.popitem() # ("name","武沛齐" )

  print(info) # {"age":12, "status":True}
  print(data) # ("name","武沛齐") 
  #py3.6后，popitem移除最后的值。
  py3.6之前，popitem随机删除。

2.3公共功能
 1.求并集 
  v1 = {"k1": 1, "k2": 2}
  v2 = {"k2": 22, "k3": 33}

  v3 = v1 | v2
  print(v3) # {'k1': 1, 'k2': 22, 'k3': 33}

2.长度
  info = {"age":12, "status":True,"name":"武沛齐"}
  data = len(info)
  print(data) # 输出：3
  
3.是否包含  
  info = { "age":12,  "status":True,"name":"武沛齐" }
  v1 = "age" in info
  print(v1) #1

  v2 = "age" in info.keys()
  print(v2)

  if "age" in info:
      pass
  else:
      pass
      
  info = {"age":12, "status":True,"name":"武沛齐"}
  v1 = "武佩奇" in info.values()
  print(v1)
  
  info = {"age": 12, "status": True, "name": "武沛齐"}
  # 输出info.items()获取到的 dict_items([ ('age', 12),  ('status', True),  ('name', 'wupeiqi'),  ('email', 'xx@live.com')  ])
  v1 = ("age", 12) in info.items()
  print(v1)
 
4.索引，索引（键） 字典不同于元组和列表，字典的索引是键，而列表和元组则是 0、1、2等数值 。
  info = { "age":12,  "status":True, "name":"武沛齐"}
  print( info["age"] )  	    # 输出：12
  print( info["name"] )		# 输出：武沛齐
  print( info["status"] )	    # 输出：True
  print( info["xxxx"] )   	# 报错，通过键为索引去获取之后时，键不存在会报错（以后项目开发时建议使用get方法根据键去获取值）
  value = info.get("xxxxx") # None
  print(value)
  
5.根据键 修改值 和 添加值 和 删除键值对 上述示例通过键可以找到字典中的值，通过键也可以对字典进行添加和更新操作
info = {"age":12, "status":True,"name":"武沛齐"}

info["gender"] = "男"

print(info) # 输出： {"age":12, "status":True,"name":"武沛齐","gender":"男"}
info = {"age":12, "status":True,"name":"武沛齐"}

info["age"] = "18" 

print(info) # 输出： {"age":"18", "status":True,"name":"武沛齐"}
info = {"age":12, "status":True,"name":"武沛齐"}
del info["age"]  # 删除info字典中键为age的那个键值对（键不存在则报错）

print(info) # 输出： {"status":True,"name":"武沛齐"}
info = {"age": 12, "status": True, "name": "武沛齐"}
if "agea" in info:

    # del info["age"]
    data = info.pop("age")
    print(info)
    print(data)
else:
    print("键不存在")
    
  for循环 由于字典也属于是容器，内部可以包含多个键值对，可以通过循环对其中的：键、值、键值进行循环；

  info = {"age":12, "status":True,"name":"武沛齐"}
  for item in info:
    print(item)  # 所有键
  info = {"age":12, "status":True,"name":"武沛齐"}
  for item in info.key():
    print(item)
  info = {"age":12, "status":True,"name":"武沛齐"}
  for item in info.values():
    print(item)
  info = {"age":12, "status":True,"name":"武沛齐"}
  for key,value in info.items():
	print(key,value)

3.3转换
  转换成字典（一般不用）
  v = dict( [ ("k1", "v1"), ["k2", "v2"] ] )
  print(v) # { "k1":"v1", "k2":"v2" }
  
  info = { "age":12, "status":True, "name":"武沛齐" }
  
  v1 = list(info)        # ["age","status","name"]

  v2 = list(info.keys()) # ["age","status","name"]

  v3 = list(info.values()) # [12,True,"武沛齐"]

  v4 = list(info.items()) # [ ("age",12), ("status",True), ("name","武沛齐") ]

3.4嵌套
  字典的键必须可哈希（list/set/dict不可哈希）。

  info = {
      (11,22):123
  }

  # 错误
  info = {
      (11,[11,22,],22):"alex"
  }
  字典的值可以是任意类型。

  info = {
      "k1":{12,3,5},
    "k2":{"xx":"x1"}
  }
  字典的键和集合的元素在遇到 布尔值 和 1、0 时，需注意重复的情况。

  元组的元素不可以被替换。

  dic = {
    'name':'汪峰',
    'age':48,
    'wife':[ {'name':'国际章','age':38},{'name':'李杰','age':48} ],
    'children':['第一个娃','第二个娃']
  }

  1. 获取汪峰的妻子名字
    d1 = dic['wife'][0]['name']
    print(d1)
  2. 获取汪峰的孩子们
    d2 = dic['children']
    print(d2)
  3. 获取汪峰的第一个孩子
    d3 = dic['children'][0]
    print(d3)
  4. 汪峰的媳妇姓名变更为 章子怡
    dic['wife'][0]['name] = "章子怡"
    print(dic)
  5. 汪峰再娶一任妻子
    dic['wife'].append( {"name":"铁锤","age":19} )
    print(dic)

  6. 给汪峰添加一个爱好：吹牛逼
    dic['hobby'] = "吹牛逼"
    print(dic)
  7. 删除汪峰的年龄
    del dic['age']
    或
    dic.pop('age')
    print(dic)
3.浮点型
浮点型，一般在开发中用于表示小数。

v1 = 3.14
v2 = 9.89
关于浮点型的其他知识点如下：
在类型转换时需要，在浮点型转换为整型时，会将小数部分去掉。
v1 = 3.14 
data = int(v1)
print(data) # 3

想要保留小数点后N位
v1 = 3.1415926
result = round(v1,3)
print(result) # 3.142

在项目中如果遇到精确的小数计算应该怎么办？
import decimal
v1 = decimal.Decimal("0.1")
v2 = decimal.Decimal("0.2")
v3 = v1 + v2
print(v3) # 0.3



